{"version":3,"sources":["webpack:///./assets/js/theme/auth.js","webpack:///./node_modules/lodash/toString.js","webpack:///./node_modules/lodash/capitalize.js","webpack:///./node_modules/lodash/_hasUnicode.js","webpack:///./node_modules/lodash/_baseIndexOf.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/utils/form-utils.js","webpack:///./node_modules/lodash/includes.js","webpack:///./node_modules/lodash/upperFirst.js","webpack:///./node_modules/lodash/_createCaseFirst.js","webpack:///./node_modules/lodash/_castSlice.js","webpack:///./node_modules/lodash/_baseSlice.js","webpack:///./node_modules/lodash/_stringToArray.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/camelCase.js","webpack:///./node_modules/lodash/_createCompounder.js","webpack:///./node_modules/lodash/_arrayReduce.js","webpack:///./node_modules/lodash/deburr.js","webpack:///./node_modules/lodash/_baseToString.js","webpack:///./node_modules/lodash/words.js","webpack:///./node_modules/lodash/_asciiWords.js","webpack:///./node_modules/lodash/_hasUnicodeWord.js","webpack:///./node_modules/lodash/_unicodeWords.js","webpack:///./assets/js/theme/common/utils/translations-utils.js","webpack:///./node_modules/lodash/_baseIteratee.js","webpack:///./node_modules/lodash/keys.js","webpack:///./node_modules/lodash/_baseCreate.js","webpack:///./assets/js/theme/common/state-country.js","webpack:///./node_modules/lodash/each.js","webpack:///./node_modules/lodash/transform.js","webpack:///./node_modules/lodash/_arrayEach.js","webpack:///./node_modules/lodash/_baseForOwn.js","webpack:///./node_modules/lodash/_baseFor.js","webpack:///./node_modules/lodash/_createBaseFor.js","webpack:///./assets/js/theme/common/form-validation.js"],"names":["Auth","context","validationDictionary","createTranslationDictionary","formCreateSelector","recaptcha","$","registerLoginValidation","$loginForm","loginModel","forms","this","loginValidator","nod","submit","add","selector","validate","cb","val","email","errorMessage","useValidEmail","password","enterPass","on","event","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","forgotPasswordValidator","registerNewPasswordValidation","enterPassword","matchPassword","password_match","invalidPassword","invalid_password","newPasswordValidator","newPasswordForm","passwordSelector","password2Selector","errorTextMessages","createPasswordValidationErrorTextObject","Validators","setPasswordValidation","passwordRequirements","registerCreateAccountValidator","$createAccountForm","$last","validationModel","validation","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","stateCountry","err","field","Error","$field","getStatus","remove","is","setStateCountryValidation","field_not_blank","cleanUpStateValidation","setEmailValidation","valid_email","onReady","attr","recaptchaTitle","classifyForm","$newPasswordForm","length","PageManager","module","exports","value","toString","upperFirst","string","toLowerCase","reHasUnicode","RegExp","test","array","fromIndex","index","notEmpty","inputTagNames","empty","confirm","mismatch","invalid","onEmptyPasswordErrorText","onConfirmPasswordErrorText","onMismatchPasswordErrorText","onNotValidPasswordErrorText","formSelector","options","$form","$inputs","find","join","formFieldClass","each","__","input","specificClassName","$input","$formField","parent","tagName","prop","className","inputType","addClass","classifyInput","insertStateHiddenField","$stateField","stateFieldAttrs","type","name","fieldId","match","getFieldId","after","validator","errorText","requirements","isOptional","$password","passwordValidations","result","alpha","numeric","minlength","setMinMaxPriceValidation","selectors","priceValidationErrorTexts","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","onMinPriceError","onMaxPriceError","minPriceNotEntered","maxPriceNotEntered","onInvalidPrice","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","$fieldClassElement","data","Object","keys","classes","forEach","hasClass","removeClass","baseIndexOf","createCaseFirst","castSlice","hasUnicode","stringToArray","methodName","strSymbols","undefined","chr","charAt","trailing","slice","baseSlice","start","end","Array","asciiToArray","unicodeToArray","split","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","rsSymbol","reUnicode","capitalize","camelCase","createCompounder","word","arrayReduce","deburr","words","reApos","callback","replace","iteratee","accumulator","initAccum","baseToString","asciiWords","hasUnicodeWord","unicodeWords","pattern","guard","reAsciiWord","reHasUnicodeWord","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsUpper","rsMiscLower","rsMiscUpper","rsModifier","rsEmoji","reUnicodeWord","isTranslationDictionaryNotEmpty","dictionary","activeDictionary","i","JSON","parse","chooseActiveDictionary","validationDictionaryJSON","validationFallbackDictionaryJSON","validationDefaultDictionaryJSON","localizations","values","map","key","pop","reduce","acc","nativeKeys","overArg","isObject","objectCreate","create","baseCreate","object","proto","prototype","stateElement","countryName","currentTarget","utils","api","country","getByName","response","showAlertModal","state_error","$currentInput","states","newElement","attrs","item","ret","replacementAttributes","id","class","replaceWith","$newElement","prev","hide","makeStateOptional","$selectElement","$hiddenInput","append","required","show","makeStateRequired","statesArray","container","push","prefix","stateObj","useIdForStates","html","addOptions","arrayEach","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isTypedArray","isArr","isArrLike","Ctor","constructor","baseFor","createBaseFor","fromRight","keysFunc","iterable","props","buildValidation","$validateableElement","formFieldId","secondarySelector","fieldValidations","formFieldSelector","dateValidation","min_date","max_date","invalidMessage","formElementId","minSplit","maxSplit","minDate","Date","maxDate","triggeredBy","day","Number","month","year","chosenDate","buildDateValidation","element","$inputElement","get","inputName","elementSelector","label","min","max","numberVal","buildNumberRangeValidation","buildRequiredValidation","checkbox","checked","validationsToPerform","requiredFieldValidationText","requiredValidationMessage","first","concat"],"mappings":"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","file":"theme-bundle.chunk.10.js","sourcesContent":["import PageManager from './page-manager';\r\nimport stateCountry from './common/state-country';\r\nimport nod from './common/nod';\r\nimport validation from './common/form-validation';\r\nimport forms from './common/models/forms';\r\nimport { classifyForm, Validators, createPasswordValidationErrorTextObject } from './common/utils/form-utils';\r\nimport { createTranslationDictionary } from './common/utils/translations-utils';\r\n\r\nexport default class Auth extends PageManager {\r\n    constructor(context) {\r\n        super(context);\r\n        this.validationDictionary = createTranslationDictionary(context);\r\n        this.formCreateSelector = 'form[data-create-account-form]';\r\n        this.recaptcha = $('.g-recaptcha iframe[src]');\r\n    }\r\n\r\n    registerLoginValidation($loginForm) {\r\n        const loginModel = forms;\r\n\r\n        this.loginValidator = nod({\r\n            submit: '.login-form input[type=\"submit\"]',\r\n        });\r\n\r\n        this.loginValidator.add([\r\n            {\r\n                selector: '.login-form input[name=\"login_email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = loginModel.email(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.useValidEmail,\r\n            },\r\n            {\r\n                selector: '.login-form input[name=\"login_pass\"]',\r\n                validate: (cb, val) => {\r\n                    const result = loginModel.password(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.enterPass,\r\n            },\r\n        ]);\r\n\r\n        $loginForm.on('submit', event => {\r\n            this.loginValidator.performCheck();\r\n\r\n            if (this.loginValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    registerForgotPasswordValidation($forgotPasswordForm) {\r\n        this.forgotPasswordValidator = nod({\r\n            submit: '.forgot-password-form input[type=\"submit\"]',\r\n        });\r\n\r\n        this.forgotPasswordValidator.add([\r\n            {\r\n                selector: '.forgot-password-form input[name=\"email\"]',\r\n                validate: (cb, val) => {\r\n                    const result = forms.email(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: this.context.useValidEmail,\r\n            },\r\n        ]);\r\n\r\n        $forgotPasswordForm.on('submit', event => {\r\n            this.forgotPasswordValidator.performCheck();\r\n\r\n            if (this.forgotPasswordValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    registerNewPasswordValidation() {\r\n        const { password: enterPassword, password_match: matchPassword, invalid_password: invalidPassword } = this.validationDictionary;\r\n        const newPasswordForm = '.new-password-form';\r\n        const newPasswordValidator = nod({\r\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\r\n        });\r\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\r\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\r\n        const errorTextMessages = createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, invalidPassword);\r\n        Validators.setPasswordValidation(\r\n            newPasswordValidator,\r\n            passwordSelector,\r\n            password2Selector,\r\n            this.passwordRequirements,\r\n            errorTextMessages,\r\n        );\r\n    }\r\n\r\n    registerCreateAccountValidator($createAccountForm) {\r\n        const validationModel = validation($createAccountForm, this.context);\r\n        const createAccountValidator = nod({\r\n            submit: `${this.formCreateSelector} input[type='submit']`,\r\n        });\r\n        const $stateElement = $('[data-field-type=\"State\"]');\r\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\r\n        const $emailElement = $(emailSelector);\r\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\r\n        const $passwordElement = $(passwordSelector);\r\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\r\n        const $password2Element = $(password2Selector);\r\n\r\n        createAccountValidator.add(validationModel);\r\n\r\n        if ($stateElement) {\r\n            let $last;\r\n\r\n            // Requests the states for a country with AJAX\r\n            stateCountry($stateElement, this.context, (err, field) => {\r\n                if (err) {\r\n                    throw new Error(err);\r\n                }\r\n\r\n                const $field = $(field);\r\n\r\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\r\n                    createAccountValidator.remove($stateElement);\r\n                }\r\n\r\n                if ($last) {\r\n                    createAccountValidator.remove($last);\r\n                }\r\n\r\n                if ($field.is('select')) {\r\n                    $last = field;\r\n                    Validators.setStateCountryValidation(createAccountValidator, field, this.validationDictionary.field_not_blank);\r\n                } else {\r\n                    Validators.cleanUpStateValidation(field);\r\n                }\r\n            });\r\n        }\r\n\r\n        if ($emailElement) {\r\n            createAccountValidator.remove(emailSelector);\r\n            Validators.setEmailValidation(createAccountValidator, emailSelector, this.validationDictionary.valid_email);\r\n        }\r\n\r\n        if ($passwordElement && $password2Element) {\r\n            const { password: enterPassword, password_match: matchPassword, invalid_password: invalidPassword } = this.validationDictionary;\r\n\r\n            createAccountValidator.remove(passwordSelector);\r\n            createAccountValidator.remove(password2Selector);\r\n            Validators.setPasswordValidation(\r\n                createAccountValidator,\r\n                passwordSelector,\r\n                password2Selector,\r\n                this.passwordRequirements,\r\n                createPasswordValidationErrorTextObject(enterPassword, enterPassword, matchPassword, invalidPassword),\r\n            );\r\n        }\r\n\r\n        $createAccountForm.on('submit', event => {\r\n            createAccountValidator.performCheck();\r\n\r\n            if (createAccountValidator.areAll('valid')) {\r\n                return;\r\n            }\r\n\r\n            event.preventDefault();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\r\n     */\r\n    onReady() {\r\n        if (!this.recaptcha.attr('title')) {\r\n            this.recaptcha.attr('title', this.context.recaptchaTitle);\r\n        }\r\n\r\n        const $createAccountForm = classifyForm(this.formCreateSelector);\r\n        const $loginForm = classifyForm('.login-form');\r\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\r\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\r\n\r\n        // Injected via auth.html\r\n        this.passwordRequirements = this.context.passwordRequirements;\r\n\r\n        if ($loginForm.length) {\r\n            this.registerLoginValidation($loginForm);\r\n        }\r\n\r\n        if ($newPasswordForm.length) {\r\n            this.registerNewPasswordValidation();\r\n        }\r\n\r\n        if ($forgotPasswordForm.length) {\r\n            this.registerForgotPasswordValidation($forgotPasswordForm);\r\n        }\r\n\r\n        if ($createAccountForm.length) {\r\n            this.registerCreateAccountValidator($createAccountForm);\r\n        }\r\n    }\r\n}\r\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","const forms = {\r\n    email(value) {\r\n        const re = /^.+@.+\\..+/;\r\n        return re.test(value);\r\n    },\r\n\r\n    /**\r\n     * Validates a password field\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    password(value) {\r\n        return this.notEmpty(value);\r\n    },\r\n\r\n    /**\r\n     * validates if a field is empty\r\n     * @param value\r\n     * @returns {boolean}\r\n     *\r\n     */\r\n    notEmpty(value) {\r\n        return value.length > 0;\r\n    },\r\n};\r\n\r\nexport default forms;\r\n","import _ from 'lodash';\r\nimport nod from '../nod';\r\nimport forms from '../models/forms';\r\n\r\nconst inputTagNames = [\r\n    'input',\r\n    'select',\r\n    'textarea',\r\n];\r\n/**\r\n * Set up Object with Error Messages on Password Validation. Please use messages in mentioned order\r\n * @param {string} empty defines error text for empty field\r\n * @param {string} confirm defines error text for empty confirmation field\r\n * @param {string} mismatch defines error text if confirm passford mismatches passford field\r\n * @param {string} invalid defines error text for invalid password charaters sequence\r\n * @return {object} messages or default texts if nothing is providing\r\n */\r\nexport const createPasswordValidationErrorTextObject = (empty, confirm, mismatch, invalid) => ({\r\n    onEmptyPasswordErrorText: empty,\r\n    onConfirmPasswordErrorText: confirm,\r\n    onMismatchPasswordErrorText: mismatch,\r\n    onNotValidPasswordErrorText: invalid,\r\n});\r\n\r\n\r\n/**\r\n * Apply class name to an input element on its type\r\n * @param {object} input\r\n * @param {string} formFieldClass\r\n * @return {object} Element itself\r\n */\r\nfunction classifyInput(input, formFieldClass) {\r\n    const $input = $(input);\r\n    const $formField = $input.parent(`.${formFieldClass}`);\r\n    const tagName = $input.prop('tagName').toLowerCase();\r\n\r\n    let className = `${formFieldClass}--${tagName}`;\r\n    let specificClassName;\r\n\r\n    // Input can be text/checkbox/radio etc...\r\n    if (tagName === 'input') {\r\n        const inputType = $input.prop('type');\r\n\r\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\r\n            // ie: .form-field--checkbox, .form-field--radio\r\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\r\n        } else {\r\n            // ie: .form-field--input .form-field--inputText\r\n            specificClassName = `${className}${_.capitalize(inputType)}`;\r\n        }\r\n    }\r\n\r\n    // Apply class modifier\r\n    return $formField\r\n        .addClass(className)\r\n        .addClass(specificClassName);\r\n}\r\n\r\n/**\r\n * Apply class name to each input element in a form based on its type\r\n * @example\r\n * // Before\r\n * <form id=\"form\">\r\n *     <div class=\"form-field\">\r\n *         <input type=\"text\">\r\n *     </div>\r\n *     <div class=\"form-field\">\r\n *         <select>...</select>\r\n *     </div>\r\n * </form>\r\n *\r\n * classifyForm('#form', { formFieldClass: 'form-field' });\r\n *\r\n * // After\r\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\r\n * <div class=\"form-field form-field--select\">...</div>\r\n *\r\n * @param {string|object} formSelector - selector or element\r\n * @param {object} options\r\n * @return {jQuery} Element itself\r\n */\r\nexport function classifyForm(formSelector, options = {}) {\r\n    const $form = $(formSelector);\r\n    const $inputs = $form.find(inputTagNames.join(', '));\r\n\r\n    // Obtain options\r\n    const { formFieldClass = 'form-field' } = options;\r\n\r\n    // Classify each input in a form\r\n    $inputs.each((__, input) => {\r\n        classifyInput(input, formFieldClass);\r\n    });\r\n\r\n    return $form;\r\n}\r\n\r\n/**\r\n * Get id from given field\r\n * @param {object} $field JQuery field object\r\n * @return {string}\r\n */\r\nfunction getFieldId($field) {\r\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\r\n\r\n    if (fieldId && fieldId.length !== 0) {\r\n        return fieldId[0];\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * Insert hidden field after State/Province field\r\n * @param {object} $stateField JQuery field object\r\n */\r\nfunction insertStateHiddenField($stateField) {\r\n    const fieldId = getFieldId($stateField);\r\n    const stateFieldAttrs = {\r\n        type: 'hidden',\r\n        name: `FormFieldIsText${fieldId}`,\r\n        value: '1',\r\n    };\r\n\r\n    $stateField.after($('<input />', stateFieldAttrs));\r\n}\r\n\r\nconst Validators = {\r\n    /**\r\n     * Sets up a new validation when the form is dirty\r\n     * @param validator\r\n     * @param field\r\n     * @param {string} errorText describes errorMassage on email validation\r\n     */\r\n    setEmailValidation: (validator, field, errorText) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: (cb, val) => {\r\n                    const result = forms.email(val);\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: errorText,\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Validate password fields\r\n     * @param validator\r\n     * @param passwordSelector\r\n     * @param password2Selector\r\n     * @param requirements\r\n     * @param {object} errorTextsObject\r\n     * @param isOptional\r\n     */\r\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, {\r\n        onEmptyPasswordErrorText, onConfirmPasswordErrorText, onMismatchPasswordErrorText, onNotValidPasswordErrorText,\r\n    }, isOptional) => {\r\n        const $password = $(passwordSelector);\r\n        const passwordValidations = [\r\n            {\r\n                selector: passwordSelector,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    if (isOptional) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: onEmptyPasswordErrorText,\r\n            },\r\n            {\r\n                selector: passwordSelector,\r\n                validate: (cb, val) => {\r\n                    const result = val.match(new RegExp(requirements.alpha))\r\n                        && val.match(new RegExp(requirements.numeric))\r\n                        && val.length >= requirements.minlength;\r\n\r\n                    // If optional and nothing entered, it is valid\r\n                    if (isOptional && val.length === 0) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: onNotValidPasswordErrorText,\r\n            },\r\n            {\r\n                selector: password2Selector,\r\n                validate: (cb, val) => {\r\n                    const result = val.length;\r\n\r\n                    if (isOptional) {\r\n                        return cb(true);\r\n                    }\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: onConfirmPasswordErrorText,\r\n            },\r\n            {\r\n                selector: password2Selector,\r\n                validate: (cb, val) => {\r\n                    const result = val === $password.val();\r\n\r\n                    cb(result);\r\n                },\r\n                errorMessage: onMismatchPasswordErrorText,\r\n            },\r\n        ];\r\n\r\n        validator.add(passwordValidations);\r\n    },\r\n\r\n    /**\r\n     * Validate password fields\r\n     * @param {Nod} validator\r\n     * @param {Object} selectors\r\n     * @param {string} selectors.errorSelector\r\n     * @param {string} selectors.fieldsetSelector\r\n     * @param {string} selectors.formSelector\r\n     * @param {string} selectors.maxPriceSelector\r\n     * @param {string} selectors.minPriceSelector\r\n     */\r\n    setMinMaxPriceValidation: (validator, selectors, priceValidationErrorTexts = {}) => {\r\n        const {\r\n            errorSelector,\r\n            fieldsetSelector,\r\n            formSelector,\r\n            maxPriceSelector,\r\n            minPriceSelector,\r\n        } = selectors;\r\n\r\n        // eslint-disable-next-line object-curly-newline\r\n        const { onMinPriceError, onMaxPriceError, minPriceNotEntered, maxPriceNotEntered, onInvalidPrice } = priceValidationErrorTexts;\r\n\r\n        validator.configure({\r\n            form: formSelector,\r\n            preventSubmit: true,\r\n            successClass: '_', // KLUDGE: Don't apply success class\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: onMinPriceError,\r\n            selector: minPriceSelector,\r\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: onMaxPriceError,\r\n            selector: maxPriceSelector,\r\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: maxPriceNotEntered,\r\n            selector: maxPriceSelector,\r\n            validate: 'presence',\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: minPriceNotEntered,\r\n            selector: minPriceSelector,\r\n            validate: 'presence',\r\n        });\r\n\r\n        validator.add({\r\n            errorMessage: onInvalidPrice,\r\n            selector: [minPriceSelector, maxPriceSelector],\r\n            validate: 'min-number:0',\r\n        });\r\n\r\n        validator.setMessageOptions({\r\n            selector: [minPriceSelector, maxPriceSelector],\r\n            parent: fieldsetSelector,\r\n            errorSpan: errorSelector,\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Sets up a new validation when the form is dirty\r\n     * @param validator\r\n     * @param field\r\n     */\r\n    setStateCountryValidation: (validator, field, errorText) => {\r\n        if (field) {\r\n            validator.add({\r\n                selector: field,\r\n                validate: 'presence',\r\n                errorMessage: errorText,\r\n            });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes classes from dirty form if previously checked\r\n     * @param field\r\n     */\r\n    cleanUpStateValidation: (field) => {\r\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\r\n\r\n        Object.keys(nod.classes).forEach((value) => {\r\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\r\n                $fieldClassElement.removeClass(nod.classes[value]);\r\n            }\r\n        });\r\n    },\r\n};\r\n\r\nexport { Validators, insertStateHiddenField };\r\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var capitalize = require('./capitalize'),\n    createCompounder = require('./_createCompounder');\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function(result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\nmodule.exports = camelCase;\n","var arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nmodule.exports = asciiWords;\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nmodule.exports = hasUnicodeWord;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nmodule.exports = unicodeWords;\n","const TRANSLATIONS = 'translations';\r\nconst isTranslationDictionaryNotEmpty = (dictionary) => !!Object.keys(dictionary[TRANSLATIONS]).length;\r\nconst chooseActiveDictionary = (...dictionaryJsonList) => {\r\n    for (let i = 0; i < dictionaryJsonList.length; i++) {\r\n        const dictionary = JSON.parse(dictionaryJsonList[i]);\r\n        if (isTranslationDictionaryNotEmpty(dictionary)) {\r\n            return dictionary;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * defines Translation Dictionary to use\r\n * @param context provides access to 3 validation JSONs from en.json:\r\n * validation_messages, validation_fallback_messages and default_messages\r\n * @returns {Object}\r\n */\r\nexport const createTranslationDictionary = (context) => {\r\n    const { validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON } = context;\r\n    const activeDictionary = chooseActiveDictionary(validationDictionaryJSON, validationFallbackDictionaryJSON, validationDefaultDictionaryJSON);\r\n    const localizations = Object.values(activeDictionary[TRANSLATIONS]);\r\n    const translationKeys = Object.keys(activeDictionary[TRANSLATIONS]).map(key => key.split('.').pop());\r\n\r\n    return translationKeys.reduce((acc, key, i) => {\r\n        acc[key] = localizations[i];\r\n        return acc;\r\n    }, {});\r\n};\r\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","import utils from '@bigcommerce/stencil-utils';\r\nimport _ from 'lodash';\r\nimport { insertStateHiddenField } from './utils/form-utils';\r\nimport { showAlertModal } from '../global/modal';\r\n\r\n/**\r\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\r\n * @returns {jQuery|HTMLElement}\r\n */\r\nfunction makeStateRequired(stateElement, context) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-select',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\r\n\r\n    if ($hiddenInput.length !== 0) {\r\n        $hiddenInput.remove();\r\n    }\r\n\r\n    if ($newElement.prev().find('small').length === 0) {\r\n        // String is injected from localizer\r\n        $newElement.prev().append(`<small>${context.required}</small>`);\r\n    } else {\r\n        $newElement.prev().find('small').show();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * If a country with states is the default, a select will be sent,\r\n * In this case we need to be able to switch to an input field and hide the required field\r\n */\r\nfunction makeStateOptional(stateElement) {\r\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\r\n        const ret = result;\r\n        ret[item.name] = item.value;\r\n\r\n        return ret;\r\n    });\r\n\r\n    const replacementAttributes = {\r\n        type: 'text',\r\n        id: attrs.id,\r\n        'data-label': attrs['data-label'],\r\n        class: 'form-input',\r\n        name: attrs.name,\r\n        'data-field-type': attrs['data-field-type'],\r\n    };\r\n\r\n    stateElement.replaceWith($('<input />', replacementAttributes));\r\n\r\n    const $newElement = $('[data-field-type=\"State\"]');\r\n\r\n    if ($newElement.length !== 0) {\r\n        insertStateHiddenField($newElement);\r\n        $newElement.prev().find('small').hide();\r\n    }\r\n\r\n    return $newElement;\r\n}\r\n\r\n/**\r\n * Adds the array of options from the remote request to the newly created select box.\r\n * @param {Object} statesArray\r\n * @param {jQuery} $selectElement\r\n * @param {Object} options\r\n */\r\nfunction addOptions(statesArray, $selectElement, options) {\r\n    const container = [];\r\n\r\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\r\n\r\n    if (!_.isEmpty($selectElement)) {\r\n        _.each(statesArray.states, (stateObj) => {\r\n            if (options.useIdForStates) {\r\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\r\n            } else {\r\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\r\n            }\r\n        });\r\n\r\n        $selectElement.html(container.join(' '));\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {jQuery} stateElement\r\n * @param {Object} context\r\n * @param {Object} options\r\n * @param {Function} callback\r\n */\r\nexport default function (stateElement, context = {}, options, callback) {\r\n    /**\r\n     * Backwards compatible for three parameters instead of four\r\n     *\r\n     * Available options:\r\n     *\r\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\r\n     */\r\n    if (typeof options === 'function') {\r\n        /* eslint-disable no-param-reassign */\r\n        callback = options;\r\n        options = {};\r\n        /* eslint-enable no-param-reassign */\r\n    }\r\n\r\n    $('select[data-field-type=\"Country\"]').on('change', event => {\r\n        const countryName = $(event.currentTarget).val();\r\n\r\n        if (countryName === '') {\r\n            return;\r\n        }\r\n\r\n        utils.api.country.getByName(countryName, (err, response) => {\r\n            if (err) {\r\n                showAlertModal(context.state_error);\r\n                return callback(err);\r\n            }\r\n\r\n            const $currentInput = $('[data-field-type=\"State\"]');\r\n\r\n            if (!_.isEmpty(response.data.states)) {\r\n                // The element may have been replaced with a select, reselect it\r\n                const $selectElement = makeStateRequired($currentInput, context);\r\n\r\n                addOptions(response.data, $selectElement, options);\r\n                callback(null, $selectElement);\r\n            } else {\r\n                const newElement = makeStateOptional($currentInput, context);\r\n\r\n                callback(null, newElement);\r\n            }\r\n        });\r\n    });\r\n}\r\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","import { createTranslationDictionary } from './utils/translations-utils';\r\n\r\n/**\r\n * Validate that the given date for the day/month/year select inputs is within potential range\r\n * @param $formField\r\n * @param validation\r\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\r\n */\r\nfunction buildDateValidation($formField, validation) {\r\n    // No date range restriction, skip\r\n    if (validation.min_date && validation.max_date) {\r\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\r\n        const formElementId = $formField.attr('id');\r\n        const minSplit = validation.min_date.split('-');\r\n        const maxSplit = validation.max_date.split('-');\r\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\r\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\r\n\r\n        return {\r\n            selector: `#${formElementId} select[data-label=\"year\"]`,\r\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\r\n            validate: (cb, val) => {\r\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\r\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\r\n                const year = Number(val);\r\n                const chosenDate = new Date(year, month, day);\r\n\r\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\r\n            },\r\n            errorMessage: invalidMessage,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\r\n * from many different inputs\r\n * @param $formField\r\n * @param validation\r\n * @param errorText provides error validation message\r\n */\r\nfunction buildRequiredCheckboxValidation(validation, $formField, errorText) {\r\n    const formFieldId = $formField.attr('id');\r\n    const primarySelector = `#${formFieldId} input:first-of-type`;\r\n    const secondarySelector = `#${formFieldId} input`;\r\n\r\n    return {\r\n        selector: primarySelector,\r\n        triggeredBy: secondarySelector,\r\n        validate: (cb) => {\r\n            let result = false;\r\n\r\n            $(secondarySelector).each((index, checkbox) => {\r\n                if (checkbox.checked) {\r\n                    result = true;\r\n\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            cb(result);\r\n        },\r\n        errorMessage: errorText,\r\n    };\r\n}\r\n\r\nfunction buildRequiredValidation(validation, selector, errorText) {\r\n    return {\r\n        selector,\r\n        validate(cb, val) {\r\n            cb(val.length > 0);\r\n        },\r\n        errorMessage: errorText,\r\n    };\r\n}\r\n\r\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\r\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\r\n    const min = Number(validation.min);\r\n    const max = Number(validation.max);\r\n\r\n    return {\r\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\r\n        validate: (cb, val) => {\r\n            const numberVal = Number(val);\r\n\r\n            cb(numberVal >= min && numberVal <= max);\r\n        },\r\n        errorMessage: invalidMessage,\r\n    };\r\n}\r\n\r\n\r\nfunction buildValidation($validateableElement, errorMessage) {\r\n    const validation = $validateableElement.data('validation');\r\n    const fieldValidations = [];\r\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\r\n\r\n    if (validation.type === 'datechooser') {\r\n        const dateValidation = buildDateValidation($validateableElement, validation);\r\n\r\n        if (dateValidation) {\r\n            fieldValidations.push(dateValidation);\r\n        }\r\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\r\n        fieldValidations.push(buildRequiredCheckboxValidation(validation, $validateableElement, errorMessage));\r\n    } else {\r\n        $validateableElement.find('input, select, textarea').each((index, element) => {\r\n            const $inputElement = $(element);\r\n            const tagName = $inputElement.get(0).tagName;\r\n            const inputName = $inputElement.attr('name');\r\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\r\n\r\n            if (validation.type === 'numberonly') {\r\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\r\n            }\r\n            if (validation.required) {\r\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector, errorMessage));\r\n            }\r\n        });\r\n    }\r\n\r\n    return fieldValidations;\r\n}\r\n\r\n/**\r\n * Builds the validation model for dynamic forms\r\n * @param $form\r\n * @param context provides access for error messages on required fields validation\r\n * @returns {Array}\r\n */\r\nexport default function ($form, context) {\r\n    let validationsToPerform = [];\r\n    const { field_not_blank: requiredFieldValidationText } = createTranslationDictionary(context);\r\n\r\n    $form.find('[data-validation]').each((index, input) => {\r\n        const getLabel = $el => $el.first().data('validation').label;\r\n        const requiredValidationMessage = getLabel($(input)) + requiredFieldValidationText;\r\n\r\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input), requiredValidationMessage));\r\n    });\r\n\r\n    return validationsToPerform;\r\n}\r\n"],"sourceRoot":""}
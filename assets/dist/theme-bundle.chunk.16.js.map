{"version":3,"sources":["webpack:///./assets/js/theme/checkout.js","webpack:///./assets/js/theme/ob-custom/MutationListener.js"],"names":["Checkout","checkoutState","orderCommentsSelector","shippingMethodPreselected","getCachedCheckoutState","console","log","cachedStateJSON","window","localStorage","getItem","this","JSON","parse","error","generateShippingString","state","shippingMethod","date","time","pickupLocationFull","onReady","$","on","event","location","href","valid","listenForMutations","element","find","val","reactTriggerChange","addClass","that","axios","get","cartResponse","checkoutID","data","id","stateString","checkoutUpdateURL","put","customerMessage","orderCommentsDOMNode","document","querySelector","setItem","click","parent","attr","length","$shippingMethodToPreselect","$preselectedMethodParentFormField","parents","not","setTimeout","url","PageManager","win","observer","listeners","doc","MutationObserver","WebKitMutationObserver","check","listener","elements","i","len","j","jLen","querySelectorAll","selector","ready","runAllMutations","fn","call","push","observe","documentElement","childList","subtree"],"mappings":"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","file":"theme-bundle.chunk.16.js","sourcesContent":["import 'regenerator-runtime';\r\nimport PageManager from './page-manager';\r\nimport axios from 'axios';\r\nimport reactTriggerChange from 'react-trigger-change';\r\n// Mutation Listener is an IIFE so there's no need to call it - it appends a function to the global window.\r\nimport './ob-custom/MutationListener';\r\n\r\nexport default class Checkout extends PageManager {\r\n  constructor() {\r\n    super();\r\n    this.checkoutState = null;\r\n    this.orderCommentsSelector = '.optimizedCheckout-form-input[name=\"orderComment\"]'\r\n    this.shippingMethodPreselected = false;\r\n  }\r\n  getCachedCheckoutState() {\r\n    console.log(\"Getting Cached Delivery Options\")\r\n\r\n    const cachedStateJSON = window.localStorage.getItem('ob-shipping');\r\n\r\n    if (cachedStateJSON) {\r\n      this.checkoutState = JSON.parse(cachedStateJSON);\r\n      console.log(\"Checkout State Set:\", this.checkoutState)\r\n    }\r\n\r\n    if (!this.checkoutState) {\r\n      console.error(\"[Warning]: Pickup/Delivery Customization not properly persisting data for this customer.\")\r\n      return false;\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  generateShippingString(state) {\r\n    const { shippingMethod, date, time, pickupLocationFull } = state;\r\n    return `${shippingMethod} ${pickupLocationFull ? ` | Store: ${pickupLocationFull} | `: ''} Day: ${date}${time ? ` | Time: ${time}`: ''}`;\r\n  }\r\n\r\n  onReady() {\r\n    // Cart icon clicks take you directly to the cart page\r\n    $('[data-cart-preview]').on('click', (event) => window.location.href = '/cart.php');\r\n\r\n    const valid = this.getCachedCheckoutState();\r\n    \r\n    if (!valid) {\r\n      // Return early if there is no checkout state properly configured.\r\n      console.error(\"Checkout state improperly configured..\")\r\n      return;\r\n    }\r\n    if (valid && this.checkoutState.shippingMethod == 'Shipping') {\r\n      console.log(\"Shipping-Colorodo: Default Checkout Flow.\")\r\n      window.listenForMutations('[data-test=\"checkout-shipping-comments\"]', function(element) {\r\n\r\n        // Clear Order Comments\r\n        const $input = $(element).find('input');\r\n        $input.val(\"\");\r\n\r\n        reactTriggerChange(element);\r\n        $(element).addClass('ob-hidden');\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    // Allows us to access 'this' context of current instance from callbacks passed to Mutation Listener\r\n    const that = this;\r\n\r\n    window.listenForMutations('#checkout-app', async function(element) {\r\n      const cartResponse = await axios.get('/api/storefront/carts/');\r\n      that.checkoutID = cartResponse.data[0].id;\r\n\r\n      if (that.checkoutState) {\r\n        const stateString = that.generateShippingString(that.checkoutState);\r\n        const checkoutUpdateURL =  `/api/storefront/checkouts/${that.checkoutID }`;\r\n        await axios.put(\r\n            checkoutUpdateURL, { customerMessage: stateString }\r\n        );\r\n\r\n        $(that.orderCommentsSelector).val(stateString);\r\n        const orderCommentsDOMNode = document.querySelector(that.orderCommentsSelector);\r\n\r\n        window.localStorage.setItem('orderComment', stateString)\r\n\r\n        reactTriggerChange(orderCommentsDOMNode);\r\n\r\n        // Force click back to shipping step if possible\r\n        const $triggerShippingStepButton = $('.checkout-step.optimizedCheckout-checkoutStep.checkout-step--shipping .stepHeader [data-test=\"step-edit-button\"]');\r\n        $triggerShippingStepButton.click();\r\n    \r\n      }\r\n    });\r\n\r\n    window.listenForMutations('#checkoutShippingAddress', function(element) {\r\n      // Always hide the \"My Billing Address is the same as Shipping Element\"\r\n      $('#sameAsBilling').parent('.form-field').addClass('ob-hidden');\r\n      // Lock the Order Comments field.\r\n      $(that.orderCommentsSelector).attr('readonly', true);\r\n\r\n      that.shippingMethodPreselected = false;\r\n    });\r\n\r\n\r\n    // By passing in 'true', we will listen for every. single. mutation. on the shipping options container.\r\n    window.listenForMutations('#checkout-shipping-options .shippingOptions-container', function(element){\r\n      if ($('.dropdownMenu').length) return // Return early to prevent constant mutations.\r\n\r\n      let { checkoutState: { shippingMethod } } = that;\r\n\r\n      if(shippingMethod !== \"Pickup\")\r\n        shippingMethod = \"Delivery\"\r\n\r\n      const $shippingMethodToPreselect = $(`span.shippingOption-desc:contains(\"${shippingMethod}\")`);\r\n\r\n      if ($shippingMethodToPreselect.length) {\r\n\r\n        const $preselectedMethodParentFormField = $shippingMethodToPreselect.parents('.shippingOptions-container .form-field');\r\n        const $formFieldsToHide = $('.shippingOptions-container .form-field').not($preselectedMethodParentFormField);\r\n\r\n        $formFieldsToHide.parents('.form-checklist-item').addClass('ob-hidden');\r\n\r\n        if (!that.shippingMethodPreselected) {\r\n          setTimeout(function() {\r\n            $shippingMethodToPreselect.parents('.form-label.optimizedCheckout-form-label').click();\r\n            that.shippingMethodPreselected = true;\r\n          }, 1000)\r\n        }\r\n\r\n        const stateString = that.generateShippingString(that.checkoutState);\r\n        $(that.orderCommentsSelector).val(stateString);\r\n\r\n        const orderCommentsDOMNode = document.querySelector(that.orderCommentsSelector);\r\n        window.localStorage.setItem('orderComment', stateString)\r\n        reactTriggerChange(orderCommentsDOMNode);\r\n\r\n        const url =  `/api/storefront/checkouts/${that.checkoutID }`;\r\n        axios.put(\r\n          url, { customerMessage: stateString }\r\n        );\r\n      } else {\r\n        console.log(\"Shipping Option Names are not configured correctly - must be 'Pickup' or 'Delivery'\")\r\n      }\r\n    }, true);\r\n  }\r\n}\n","console.log(\"Exposing Mutation listener\");\r\n\r\nexport default (function(win) {\r\n    'use strict';\r\n    \r\n    var listeners = [], \r\n    doc = win.document, \r\n    MutationObserver = win.MutationObserver || win.WebKitMutationObserver,\r\n    observer;\r\n    \r\n    function ready(selector, fn, runAllMutations) {\r\n        // Store the selector and callback to be monitored\r\n        listeners.push({\r\n            selector: selector,\r\n            fn: fn,\r\n            runAllMutations\r\n        });\r\n        if (!observer) {\r\n            // Watch for changes in the document\r\n            observer = new MutationObserver(check);\r\n            observer.observe(doc.documentElement, {\r\n                childList: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        // Check if the element is currently in the DOM\r\n        check();\r\n    }\r\n        \r\n    function check() {\r\n        // Check the DOM for elements matching a stored selector\r\n        for (var i = 0, len = listeners.length, listener, elements; i < len; i++) {\r\n            listener = listeners[i];\r\n            // Query for elements matching the specified selector\r\n            elements = doc.querySelectorAll(listener.selector);\r\n            for (var j = 0, jLen = elements.length, element; j < jLen; j++) {\r\n                element = elements[j];\r\n                // Make sure the callback isn't invoked with the \r\n                // same element more than once\r\n                if (!element.ready) {\r\n                  \r\n                    if (!listener.runAllMutations) {\r\n                      element.ready = true;\r\n                    }\r\n                    // Invoke the callback with the element\r\n                    listener.fn.call(element, element);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Expose `ready`\r\n    console.log(\"Exposing Ready Function\")\r\n    win.listenForMutations = ready;\r\n            \r\n})(window);\r\n"],"sourceRoot":""}